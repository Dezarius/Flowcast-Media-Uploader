/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import ftp.Ftp;
import ftp.Server;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayInputStream;
import javax.swing.*;

import javax.swing.filechooser.*;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author janabelmann
 */
public class Window implements ActionListener, DocumentListener {

    private Settings settings;
    private Ftp ftp;
    private JFrame window;
    private Server server;
    private Calendar calendar;
    private String hex_redLight
    private String hex_greenLight
    private String hex_yellowLight = "89504E470D0A1A0A0000000D494844520000001E0000001E08060000003B30AEA2000000017352474200AECE1CE9000000097048597300000B1300000B1301009A9C180000015969545874584D4C3A636F6D2E61646F62652E786D7000000000003C783A786D706D65746120786D6C6E733A783D2261646F62653A6E733A6D6574612F2220783A786D70746B3D22584D5020436F726520352E342E30223E0A2020203C7264663A52444620786D6C6E733A7264663D22687474703A2F2F7777772E77332E6F72672F313939392F30322F32322D7264662D73796E7461782D6E7323223E0A2020202020203C7264663A4465736372697074696F6E207264663A61626F75743D22220A202020202020202020202020786D6C6E733A746966663D22687474703A2F2F6E732E61646F62652E636F6D2F746966662F312E302F223E0A2020202020202020203C746966663A4F7269656E746174696F6E3E313C2F746966663A4F7269656E746174696F6E3E0A2020202020203C2F7264663A4465736372697074696F6E3E0A2020203C2F7264663A5244463E0A3C2F783A786D706D6574613E0A4CC227590000097549444154480D8D566D7054E5157EDE7BEF7E6477B3C9E6FB03621228A45A4222100A020242B136FC508B4E7FD4B642073B53A7D3613A533FC682FAC3DA71DA3F6D47B4CEF8A3332A606D292856AD1369288625D94DB0A00D04423E36BB9BCD7E64B37BF7EEBD7DDE0D9B66B45ADF9973EFFB75CE73CE79CF39EF2BF039CDB22C5508915FB4BCE2D8B1631B1B1B1B3BBD5EEF724DD3AAB92EF2792392482487272626024F3FFD446F5F5FE04291E7860C9363AB38F7457F21198A1B0E1C38B0E9ECD9B32F5370289FCF73E9F3DBE4E464D4EFF7BF72F0E0C11D457EEE56D817C571F1FFE909092A0D915A569D3A75EAB1F6F6F61FD5D5D53972B91C46AE5CC6952BFF36C7AE8D20198F16CC28F5FAD0B0E42634B72E579A5B96C1E970201289E40707832F6DDF7EC721CA1993E09429AD5EB07C31F062D09BFD7D7D2FDEBA76ED864C2603FFB90F8D333D6F8A81BF3F236647212A9600EE728A21773A0E4C8F028E1A58ABB7FFD4DAB0E55BD69A755FD73C1E3782C181E0238F3CB6F7E4C993E76E1844A679F005602E14CFB4ADBFBFFF584747C7CDC3C3C3C6A9BF1EC1F9F71E51AD24C4AA4D0FE0E6CEADA85BD20CB7C75BF05F7A3685D0F835FC2BF001823D2FC0B053816D07CD3BBBEF3757B6B5D9868686AEEEDBB7EF5E1E97FF33964B50A90A5B4D6F6FEF698E2DBFFF9C7EF0E73FCC3FBC07D6630FB45AEFBCF1B21599B86C199919CB3252A4E40D4A59F96CDC9A0E8D583D275FB17EB1B7D3FAF1BDB01E3FF05DF39F677AB352565F5F5F90B29B250087052C6DCF9E3D454BC1A87D7CCD9A35B70D0683F913479F57F5E859C5C5B8FEE67D4F60FDB63BA1A82A72D9248CECC25149596C02655E37366EBB034EBBC01B87EF8719F78B93477F67B3D9EDB9CECECE55C78F1F7F72F7EEDDDF9389F0DA6BAFA9EA850B17C4A143872CBA637B7777F7AF4DD352DF3EF1AA99990EAAE9ABBDE8BA7D3F36EEEC86220CE8B351A8428762E9105676816066914DCFC03275545657C0C894E072DF5FE0AAAE15A1700AF54B9629E5E5E5AB49033D3D3D17094C79F3112CA8CD830D0D0DF6C1C0F95C7C6A50436606D5766045DB72A86612F9F40434330E919B26453F43362B0E937B8411C7F215AD68F001666A0AB3D317D5407F5FAEAABA1A9B36DDB68FEE71C8089739265B7B4D4DCDAE70388C6BC341C566CD42243F444B2BE0D2D8CF85A1E422FC4700BD4851F649D9F9B1E0BC62708F1E468992447333A0A502B02183B1912175627C1C9595555BEFBBE79EB512B000FCDC73CF6EF49496568D5DBF865C26A2404FC1E7022A99325A7604C84CDE000D17802D822D504191302C024AC54476124AE60A7CA5E42F23427606306262ECFA55ABB4D4EBDEBA63C71609ACC94F55556DA7AAA8988985F30ECD54E6B253F095D950EA75414D0FC04A5541B82B1892262C415DC542164AF6C2BC5C135C3399D84AAA1F1E8F1D15E54E2462A3B06B1D88C722A6D9D4AAF29C3BC8A14A6037EB6E53269B819E49C36E53794ED7E17695C25152094D4419A1FD30953608CD2D61E6818BE016235C12EB8265CCC18A5FA2351370BA96C2E562F287AFC2C66C30F434E6E6E660B3D99AB9D957005614A5223397E1D88483254F4102367B23342AA13A68AD19A3D51701671D7DE48150241BAD96864B2F9806DD390B8B470283916FAFA44973B0DB9DCC006E53B442C5CCCCA5651E7BC9E59612545DD7952C2D56A999E6F4CCCBA4EB856AA39576085B4961CE92C165CE92C3C9F18D9A6319600521609AA24C287656345A2E542AA390A89CC3C123D36CC8EA3A8825D52DB83A9B4AA512BA9EE3C8CE02504EA046E8790A541C85399A404B1DD4DC4661D455B216EE11FEE72D82C56390790C2AA16AAC3A04CD197435B797965759BA70405E3474B7D45097513D47DC495DCF82B503AED24A38CB5621991A471E76E2D1F504964AD01D245AAF31E4E5794BB2C97E0995E59A42EF90248F49A0547A1436EF0678CAAA19949AB416F1787C9C98C902F0F8F8E4C56432490DF38ACDE945C5D24E4498A2999C0D96CB0EA554BA565A2BC1697991D4F9BE9C83A057488A9B7BDD7664F37684C3162A97AE87C3E543369B17E9749A73E14B044E15F2F8F4E9D3FEE9E9E994AE1B22C3B2DEB4622D52F4D6D4540C39D505A58201C5F49877332D5617592BFB8256F30804434654BA613026C2D159C4E8D4A6B6F5C8992CB07A4E8946234620103847E07C0198AF86C0D4D4549F4C8AC950D4ACA86D46DBA62711E80F22CA7882CD07A5B29687C5EDAC64A69521193019CDB20F35057804416BA1387D884D6B08FAFD6859FF33D4347E05131351F9B040343A3DF0D65B6F49E0F902C2FF38EFCBD77D3EDF3655115A686A26DFB5E56EF5FA950BF8E06FAFA266E94FE06B6A4596D1896C82158AE965E465E6425118698C64D8CBE0B0679018FF04BDEF1D8159B313B7EDFC0E26C349736232A4C9A8EEEF0FFC89582324A8CCABC2EDC44B3FB262E5CAAF36D4D72D1B1DBD662EBD6999E8E8DA260686E298B8F4029A5A56C35DDBC534DE04C5D345EA805A7A2B54EF7AD83CB7F09805662707F1F6B15F6234D18DFB1E7A86C1E9B07A7A4E9B0E6789323C7CB9F7A597FEF02B628624A64C8C62936EEF7EF4D1477F5B5F57BBC432F3B9BBEEBA4BF37A5DE21FEFFC19B9C987B16EF3F7D1B8E201D8CADA79AEB20E48F604728920263FF923FC1FBC885CD9B3D8B2EBDBC8E8A675E2C409C330F2B64834167DEAA9A71EE6E6232426F73C67F12F8FD8535D5DFDE0FEFDFB9FAEF095971A866EECD8F90DA5A5A5598986C611BB7E96374F006EAF13F6129E3981737321A41229CC19AB50B66403AAEB9762ECFA98C987A249CBB44472367BF4E8D1431F7DF4D1EFC9C01BA3A0ADB5D862F9D863A117554DCDCD3FB87FCF9E0395951535B3A90456AFEE3056B5AF56CACA7CBC497342C8C20056ABC2293B60A9BC8A54BB9548C4AD0B4383E6F9F37ECDE5F22036139F39F1E69BBF190A069FA7EC10659347969CFF5A2CFB8556F0BF10951CECDEBB77EF43F5F5F55DF43A3496D3A6E69BCC86C626ABDC5725F8A6E116017A05F199A83531362AAE8E8C285956278D1530149A1A387CF8F9C3DCF43A654E158A750161FEB3D8E285E91BE04C50746EDEBCF9EE5B6EF9DA2EA7D3B19201CCA0B758FC6D2C8BF3B5DACCE7591C724C2B41538499C964873FFEF8D2DBEFBEFBEEEBE497CFDAE4A74125D0FF04960BB2C987E0912347AAD96D5FB76E5D576B6B6B87CBED6E61C656689AEA920A9AA6996692C632E9F4085BF0CC993367B93FB075EBD6D0FBEFBF5F082429EBD3ED0B81176D96E6C930964AC8A8AA28717BDD0A9F7EB3B3315E57889142A429129FF8CCA4FFD3BE2CF0623192472A52E495C122810A41C3FF976AFF0127EF917C46872B600000000049454E44AE426082";
    private String png_upload = "89504E470D0A1A0A0000000D4948445200000080000000800806000000C33E61CB00000CE34944415478DAED9D7F8C14571DC0BFBB7BB7F7BBC0C1F1A377578F2AB9036B3DB497406D2DC43605295A4DB5627A1588942850AE692DFE8136044CAA29A9A6E91FB6359C29FD955A41C182A1452A228DC580F66CEF80C25D0A395289E01DBF0A77B77EBFBB6F706F77767766DE7BF3E6CDBE4FF2327B7BB3B36FF67DE6BD793F27022163FBCE99D5B86961A119430386260C933154B3BFF37102C3390CA730F4B2BF7B307453B86BDEC173AACF512411D511E00513BC1537B7619885E1260C9F92FC9547311CC0F03686B7508843AA7F031EB41300137C026EE66158C0B6631547E92C869D18FE405B14E2B4E2F8B8420B0158B6FE2D0CF7629883A144759C723084610F865730BCAC437111680130E1295B5F0EA9C42F571D1F975CC2F032865FA2086FAB8E4C2E022700263A5DDD94E00F6368551D1F41D07DC24648E50A43AA23934E6004C084A72B9CAEF60E48DDB587915E0C3F8754AE7049756408E502B02BFE3E0C8F4178133E935E0CEB306C569D2328150013FF16DC3C05E1C9EADD4245C32A94E02FAA22A0440056957B125257BE0173020C0FA9A842FA2E0026FE624825BEEAFA7BD0A0F60492A0D3CF2FF54D0076D53F8BE16E3F4F5043B66258E6576EE08B0098F8B7E36613146E8737A4A0FE872528C11BB2BF48BA0098F86B70B30182DB7A1754A876B01625F8A9CC2F9126006BBEA5ABFE1E99275004506BE23259CDCA5204C0C4A7AED76D90EA9D33F043BD8F0B518253A20F2C5C004C7CEA87DF01C5D3A8E317BD18E6A304DD220F2A540096F87F82D4E00B83782807982B52026102B0563DBAF2AB15FC30C504DD0BCC17D57A28440076E5BF0326F1FD822468139113700B60B27D6508290EB8046077FBFBC1DCF0A9A217C36C9EDA816701583D9FAE7C53D5530B5511E77A6D27E011E025488DDC31A887461A2DF2F2414F02B0E6DDC7559FB561143FF4D26CEC5A00D6B143D53DD3B61F2CA8EF60BEDB0E245702B02EDD83607AF5820AF522CE74D395EC56802D60FAF383CE5614E06B4E77762C001BC9B349F5D9191CB1C4E9C8224702B0ACFF08846C185765652394C5C7C399B35A4FEFB38386974D7352143815E07908D900CE192D8FC0D44F7C3BF9FA78DF8BF05EF713AAA3241A1A72DE5E68A78202B04E9EBDAACF4624E9896F1152096E2DD4699457003669833A7942336EDF2EF12D422801956D6DF9269F1412603184E8C62F5FE25B845082BC378439056073F5DE879074F438497C8B63C75F80F70F6F541D6551F462989E6B2E623E0156436A22A3F6B8497C8BC3475F80231F8446820E14E01776FFB0158095FDC721042D7E5E12DF224412F442AA5A98752F904B00AAF23DAF3AD6BCF024BE054970F8E8131089289F48CD4B3B0AB039F3CD5C02507BBFD677FE2212DFA2E7F06638726CA3EE121C42016666BE9975466C5996FDAA63CB83C8C4B7088904B33397ABB11380AA7D8B55C7D42B3212DF22041274A2004BD2DF1875266C98D7BF41BF059992C84C7C0BCD25A0AA605DFAF0B14C01BE0BA929DCDAE147E25B682E01CD337CCEFA2353805DB8B95D750CDDE267E25B682CC11B28C01DD61F5763CFBA7CFB41B3A15E2A12DF425309A82D608AD5559C2E8076757F95896FA1A90457DB04D205D06A98F7F4E60EB8BEE97ED5D148A2A104578791A70B7006341AF173C7DCDD108F0727BADB5E6FC75FB30BA2512D24388B028CA317C9D8B225D70FAA8E951B3E7BC3BA517F97958D87BA0937FBF2DD7D7D7BE1FC85D350521287CACA3A181919823FEE7A14B7FF816BEBCB749180460F1FB204D0BEE76F7CEDE761569B3F35D8D7B6DC0F274EFECDF67FE5E5515D2448F6105A026855FEDB111401084D2448DE075802D0885FD94FDA904A9004203490E0280A302DC29A7F0755C78697A009406820410D0940D3BBDF511D135E822800117009DA223A3600D911540188004BD04E02ACC7176B55C78497200B400454820D11DDFBFF2D822E0041124CB9B60C62B1C048D04902D0322F7354C784171D04204A4B2350DF500E25258190600F094063FF5B54C784175D04200224413709F0218460F8B74E02100191E004099050190351E826001104098C001E102500A15A02238007440A40A894C008E001D10210AA24300278408600840A098C001E902500E1B70446000FC81480A0C4A766E3783C2AFD5C8C001E902D0041CDC5F50DF225300D411EF04300C207094E98A6600FF825002159826ED319E4013F0520244AB0C7B7EEE058AC02A6373F04D5554D39F7B97CF92CFCB3EB577065A8DBF5240B1D049838F106B8E973CBA0A2625CCE7DCE9C39067BF7FD0CAE5CB990F1FB4991A0D3B70121377EFA47D0D850780D631A6FBF75DB9D3076ACBB7BD3A00B108BC561C977764355E58482FB76BDF71B7873F75A9B63089760836F43C266B53D8389E4ECE9329B7EFD25A8AC3E0DD5D531C7C70FBA00D7D4D4A3006F3ADA978E4DDF61876009DA7D1B14EA5680C17327A1A1B11CCACA9C9D68B108400894A0CDB761E16E0518183C996C156BBCAEDCD138BA6212802009A8B1C8E90592831ADF2686781180A8AA8A25C7D115A2D80420E83E9924A8A8705E54A6919A1842AFFC981AE65500A2767C29D4D696E6FD4C310A407048306A6A98F4C9A13C0210940B506E908B621580F028C1A8C9A1D2A787F30A10C5736BC49BC2D252FB32AF9805203C48F0FFE9E184EC0522780520E8AEB7F1BA32DB46A26217807021C1E8052208D9F7012204206AAE89C1A449D93785D4D238A3790DD618E43EC37A60E024ECF9F3FAAC96BA42F82100E15002DB2562A4360889128098501787B163ED1733EBEFFF18CE9F1B96751A9EF14B00A290048944A27DE1FC43598B44495D264EA400444363199497679FE0F07002FAFA2EC248C01CF05300228F0443F81B4DF9EA8243A3978923642E14295A006A08A14622BBA153E70687E0D4A9CB324EC3337E0B40E490C07EA14842E652B1A20520CA2BA2505F6F7F5318B4A240850004FD349326C5A1BA2695B15FBE3CB2ECEB5FF947CEA562A52D162D430062CC9812A89B18CF7A3F6845812A012C264F4E4A70697070A86ED137DEB55F2C9A90353EC08D00D41F7EE9E219C7C71E575B9AEC37C8E4C2859164711004CA2BC6C1AD5F78D4D1BE3204203027E85CF4CD77732F174FC87A60841B018A1D590294C6235F5CB1BC7BD443407D7B648C11C0393204C07B81AED52B7B3E93F5BEDDCE32DA048C00CE9124C01214A033EB7DBB9DD963E3A88BB84954048C00CE112D0026FE090C531F5CD1E3ECB17184E81E42238073440B108DC20F30F16D9F87EBDBA3638D00CE11DC0ED08B9B1998FD5FB4FD7FBE0F8B7C78B411C039220588C560D9AAEFF73C97EBFFBE3D3EDE08E01C814DC15D1866DA95FD57F729741094E016DCEC2DB45F218C00CE1128C05CCCFAF7E4DDC7C9815002AA12DEC713994F36AD8496E6A5027FA6F072E0EFCFC2BEFD7C0FADC6ACFF15CCFA0B8EEF702A00751553B5D0F388A1F3E701C68DB9136A6AEA05FF5CE182069C74F7FC1E1209AE4E8C01BCFAA7E1D5FF51A11D1D4FC013714318C46EDA308257FF0378F53BEAD57535031325D8829BBB79226724900BD6F9B7E34DDF42A7FBBB15808A02EA27E05A50C248208D7ECCFA5B9D64FD16AE5722420968C4D00EE01C3A662410CE3066FD7761D6BFD3CD873C2D458512ACC1CDE3BC313612882312851FAF5ED1B3DEF5E7BC7EA1A861E446027EB0DC7F0DCBFD7BBC7C9647001A3E46CBCB70B7EE1809BC83653EDD93CDC1727FC0D3E779BE1C25A05918347AA889F7448C049EF81005988D89EF6C00A50DDCCB51A204B4C218E504DC53728C04AEA0C1BB733B56F5FC8BE72042D623651250A75135EFB18C048EA0ECFE66DEC427842D48CB3A8DA87A682490CB859292C897577EAFFB2D110713BA22B1290EA42324DB4F47F892D44C02CA099A788F652418052DE93B5F64E21352D62467B5836D60AA88426055BD853C77FB398F2D2BD2AC9D807AA44C631107D4C89348C052AFF5FC42487F2A016B36DE00A6EFC02DC39128ACF3D2BCEB065F1E4BC13A90682C81E94574467F2C064BDD76EC78C1B787D3B0AE642A12CC78823C6096FF3BCCF21F70D3A5CB83EFCF2963238B9E048EE16521956000AFFA479C8EE4118592A715B2DC8024F03CD0344C12D000CE911178D0AFAB3E1DA50FAE65AD874F81C77907BA4B40E3F671B3AAD0D06DA97150FD23B0C92794133C061E1A8F749480A66B6159FF132CEB3BF34DDAF0252EAA7F0C0B36177139860E7029822E1250C263781A13FEE95C73F57C8F93EA0864C272046A3C7A185C140D41968065F51B71BB59F5159F1537D511C8075BAE86720512A2E0C2550193E063BCB97B752401CFAC5ED1C33DB54E168116C082352B9304F742EA0967395B15154B40AD77FB20012FE2EB976435DF8A440B01D26155C8791816B06D567B82CF120CE00DDD2E2CD7B7E3EBD75554E578D04E804CB6ED686DC51FFFB6683442C505F53E269F7C224B022CC7FB301CC07AFB5FF16ADF8BD9BBF4E72DC9447B013279F5B73756E359B56002B55CBA38DCFCDF81A1A98911B81EFF351145A982C283554E61029FC7ED47B83D86DB5EFCDC0778CC1ECCDABB74C8D6DDF03FB80B08F956E873840000000049454E44AE426082";

    String[] workflows = {"", "elsa Video 720p", "elsa Video", "Maschinenbau HD", "Maschinenbau", "OhneVorUndAbspan"};
    private JComboBox<String> cb_workflows = new JComboBox<String>(workflows);

    private JButton b_connect = new JButton("Connect");
    private JButton b_fileChooser = new JButton("Datei Auswählen");
    private JButton b_upload = new JButton("Upload");
    private JButton b_test = new JButton("Test");

    private JLabel lb_dozent = new JLabel("Dozent:");
    private JLabel lb_titel = new JLabel("Titel:");
    private JLabel lb_beschreibung = new JLabel("Beschreibung:");
    private JLabel lb_datei = new JLabel("");
    private JLabel lb_workflows = new JLabel("Workflow:");
    private JLabel lb_datum = new JLabel(" ");
    private JLabel lb_username = new JLabel("User:");
    private JLabel lb_connectIndicator = new JLabel(new ImageIcon(DatatypeConverter.parseHexBinary(this.hex_redLight)));
    private JLabel lb_uploadStatus = new JLabel(" ");
    private JLabel lb_loginStatus = new JLabel(" ", JLabel.RIGHT);
    private JLabel lb_test = new JLabel("DDDDDDD");

    private JTextField tf_dozent = new JTextField();
    private JTextField tf_titel = new JTextField();
    private JTextField tf_beschreibung = new JTextField();

    private JProgressBar pb_progress = new JProgressBar();

    private JPanel connectIndicator1 = new JPanel();
    private JPanel connectIndicator2 = new JPanel();
    private JPanel connectIndicator3 = new JPanel();
    private JPanel connectIndicator4 = new JPanel();
    private JPanel connectIndicator5 = new JPanel();
    
    

    private File movie;
    private boolean upload;
    private boolean logedIn;

    public Window() {
        this.window = new JFrame("Flowcast Media Uploader");
        this.window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.window.setMinimumSize(new Dimension(400, 310));
        this.window.setLocation(300, 150);
        this.window.setLayout(new BorderLayout());
        this.window.setResizable(false);

        this.server = new Server(this);
        this.settings = new Settings(window);
        this.ftp = new Ftp(this);

        this.pb_progress.setStringPainted(true);
        this.lb_datei.setVerticalAlignment(JLabel.CENTER);
        this.lb_dozent.setVerticalAlignment(JLabel.TOP);
        this.lb_titel.setVerticalAlignment(JLabel.TOP);
        this.lb_uploadStatus.setVerticalAlignment(JLabel.BOTTOM);
        this.pb_progress.setValue(0);
        this.calendar = Calendar.getInstance();
        //this.lb_datum.setText(String.valueOf(this.calendar.get(Calendar.DAY_OF_MONTH) + "." + (this.calendar.get(Calendar.MONTH)+1) + "." + this.calendar.get(Calendar.YEAR)));
        this.upload = false;
        try {
            this.window.setIconImage(ImageIO.read(new ByteArrayInputStream(DatatypeConverter.parseHexBinary(this.png_upload))));
        } catch (IOException ex) {

        }
        this.testConnection();
        this.time();
        
        if("Mac OS X".equals(System.getProperty("os.name"))){
            this.cb_workflows.setFont(new Font("Helvetica", Font.PLAIN, 13));
            this.b_connect.setFont(new Font("Helvetica", Font.PLAIN, 13));
            this.b_fileChooser.setFont(new Font("Helvetica", Font.PLAIN, 13));
            this.b_upload.setFont(new Font("Helvetica", Font.PLAIN, 13));

            this.tf_beschreibung.setFont(new Font("Helvetica", Font.PLAIN, 15));
            this.tf_dozent.setFont(new Font("Helvetica", Font.PLAIN, 15));
            this.tf_titel.setFont(new Font("Helvetica", Font.PLAIN, 15));

            this.lb_datum.setFont(new Font("Helvetica", Font.PLAIN, 13));
            this.lb_dozent.setFont(new Font("Helvetica", Font.PLAIN, 14));
            this.lb_titel.setFont(new Font("Helvetica", Font.PLAIN, 14));
            this.lb_beschreibung.setFont(new Font("Helvetica", Font.PLAIN, 15));
            this.lb_workflows.setFont(new Font("Helvetica", Font.PLAIN, 14));
            this.lb_uploadStatus.setFont(new Font("Helvetica", Font.PLAIN, 11));
            this.lb_loginStatus.setFont(new Font("Helvetica", Font.PLAIN, 11));
        }
        else {
            this.lb_datum.setFont(new Font(this.lb_datum.getFont().getName(), Font.PLAIN, 13));
            this.lb_username.setFont(new Font(this.lb_datum.getFont().getName(), Font.PLAIN, 15));
            this.lb_dozent.setFont(new Font(this.lb_dozent.getFont().getName(), Font.PLAIN, 14));
            this.lb_titel.setFont(new Font(this.lb_titel.getFont().getName(), Font.PLAIN, 14));
            this.lb_beschreibung.setFont(new Font(this.lb_beschreibung.getFont().getName(), Font.PLAIN, 15));
            this.lb_workflows.setFont(new Font(this.lb_workflows.getFont().getName(), Font.PLAIN, 14));
            this.lb_uploadStatus.setFont(new Font(this.lb_uploadStatus.getFont().getName(), Font.PLAIN, 11));
            this.lb_loginStatus.setFont(new Font(this.lb_loginStatus.getFont().getName(), Font.PLAIN, 11));
        }
        
        

        this.b_upload.setEnabled(this.enableUpload());

        JPanel panel = new JPanel();
        SpringLayout springPanel = new SpringLayout();
        panel.setLayout(springPanel);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_connectIndicator, 10, SpringLayout.NORTH, panel);
        springPanel.putConstraint(SpringLayout.EAST, this.lb_connectIndicator, -10, SpringLayout.EAST, panel);
        springPanel.putConstraint(SpringLayout.SOUTH, this.lb_connectIndicator, 30, SpringLayout.NORTH, this.lb_connectIndicator);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_connectIndicator, -30, SpringLayout.EAST, this.lb_connectIndicator);
        panel.add(this.lb_connectIndicator);

        springPanel.putConstraint(SpringLayout.NORTH, this.b_connect, 13, SpringLayout.NORTH , panel);
        springPanel.putConstraint(SpringLayout.EAST, this.b_connect, -5, SpringLayout.WEST , this.lb_connectIndicator);
        springPanel.putConstraint(SpringLayout.SOUTH, this.b_connect, 24, SpringLayout.NORTH , this.b_connect);
        springPanel.putConstraint(SpringLayout.WEST, this.b_connect, -100, SpringLayout.EAST , this.b_connect);
        panel.add(this.b_connect);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_datum, 14, SpringLayout.NORTH , panel);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_datum, 10, SpringLayout.WEST , panel);
        springPanel.putConstraint(SpringLayout.SOUTH, this.lb_datum, 18, SpringLayout.NORTH , this.lb_datum);
        springPanel.putConstraint(SpringLayout.EAST, this.lb_datum, -5, SpringLayout.WEST , this.b_connect);
        panel.add(this.lb_datum);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_loginStatus, 2, SpringLayout.SOUTH, this.lb_connectIndicator);
        springPanel.putConstraint(SpringLayout.EAST, this.lb_loginStatus, 0, SpringLayout.EAST, this.lb_connectIndicator);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_loginStatus, -300, SpringLayout.EAST, this.lb_connectIndicator);
        panel.add(this.lb_loginStatus);

        springPanel.putConstraint(SpringLayout.NORTH, this.b_fileChooser, 30, SpringLayout.SOUTH, this.lb_datum);
        springPanel.putConstraint(SpringLayout.EAST, this.b_fileChooser, 150, SpringLayout.WEST, this.b_fileChooser);
        springPanel.putConstraint(SpringLayout.WEST, this.b_fileChooser, 10, SpringLayout.WEST, panel);
        springPanel.putConstraint(SpringLayout.SOUTH, this.b_fileChooser, 24, SpringLayout.NORTH, this.b_fileChooser);
        panel.add(this.b_fileChooser);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_datei, 0, SpringLayout.NORTH, this.b_fileChooser);
        springPanel.putConstraint(SpringLayout.EAST, this.lb_datei, -9, SpringLayout.EAST, panel);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_datei, 5, SpringLayout.EAST, this.b_fileChooser);
        springPanel.putConstraint(SpringLayout.SOUTH, this.lb_datei, 20, SpringLayout.NORTH, this.lb_datei);
        panel.add(this.lb_datei);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_dozent, 4, SpringLayout.SOUTH , this.b_fileChooser);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_dozent, 0, SpringLayout.WEST , this.b_fileChooser);
        springPanel.putConstraint(SpringLayout.EAST, this.lb_dozent, 60, SpringLayout.WEST , this.lb_dozent);
        springPanel.putConstraint(SpringLayout.SOUTH, this.lb_dozent, 20, SpringLayout.NORTH , this.lb_dozent);
        panel.add(this.lb_dozent);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_titel, 3, SpringLayout.SOUTH , this.lb_dozent);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_titel, 0, SpringLayout.WEST , this.lb_dozent);
        springPanel.putConstraint(SpringLayout.EAST, this.lb_titel, 60, SpringLayout.WEST , this.lb_titel);
        springPanel.putConstraint(SpringLayout.SOUTH, this.lb_titel, 20, SpringLayout.NORTH , this.lb_titel);
        panel.add(this.lb_titel);

        springPanel.putConstraint(SpringLayout.SOUTH, this.tf_dozent, -1, SpringLayout.SOUTH , this.lb_dozent);
        springPanel.putConstraint(SpringLayout.WEST, this.tf_dozent, 0, SpringLayout.EAST , this.lb_dozent);
        springPanel.putConstraint(SpringLayout.EAST, this.tf_dozent, -10, SpringLayout.EAST , panel);
        panel.add(this.tf_dozent);

        springPanel.putConstraint(SpringLayout.SOUTH, this.tf_titel, -1, SpringLayout.SOUTH , this.lb_titel);
        springPanel.putConstraint(SpringLayout.WEST, this.tf_titel, 0, SpringLayout.EAST , this.lb_titel);
        springPanel.putConstraint(SpringLayout.EAST, this.tf_titel, -10, SpringLayout.EAST , panel);
        panel.add(this.tf_titel);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_beschreibung, 5, SpringLayout.SOUTH, this.lb_titel);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_beschreibung, 0, SpringLayout.WEST, this.lb_dozent);
        panel.add(this.lb_beschreibung);

        springPanel.putConstraint(SpringLayout.NORTH, this.tf_beschreibung, 2, SpringLayout.SOUTH, this.lb_beschreibung);
        springPanel.putConstraint(SpringLayout.WEST, this.tf_beschreibung, 0, SpringLayout.WEST, this.lb_beschreibung);
        springPanel.putConstraint(SpringLayout.EAST, this.tf_beschreibung, -10, SpringLayout.EAST, panel);
        panel.add(this.tf_beschreibung);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_workflows, 5, SpringLayout.SOUTH, this.tf_beschreibung);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_workflows, 0, SpringLayout.WEST, this.lb_beschreibung);
        springPanel.putConstraint(SpringLayout.EAST, this.lb_workflows, 70, SpringLayout.WEST, this.lb_workflows);
        springPanel.putConstraint(SpringLayout.SOUTH, this.lb_workflows, 20, SpringLayout.NORTH, this.lb_workflows);
        panel.add(this.lb_workflows);

        springPanel.putConstraint(SpringLayout.NORTH, this.cb_workflows, -1, SpringLayout.NORTH, this.lb_workflows);
        springPanel.putConstraint(SpringLayout.WEST, this.cb_workflows, 0, SpringLayout.EAST, this.lb_workflows);
        springPanel.putConstraint(SpringLayout.EAST, this.cb_workflows, -10, SpringLayout.EAST, panel);
        springPanel.putConstraint(SpringLayout.SOUTH, this.cb_workflows, 23, SpringLayout.NORTH, this.cb_workflows);
        panel.add(this.cb_workflows);

        springPanel.putConstraint(SpringLayout.NORTH, this.lb_uploadStatus, 10, SpringLayout.SOUTH, this.lb_workflows);
        springPanel.putConstraint(SpringLayout.WEST, this.lb_uploadStatus, 1, SpringLayout.WEST, this.lb_workflows);
        springPanel.putConstraint(SpringLayout.EAST, this.lb_uploadStatus, -10, SpringLayout.EAST, panel);
        springPanel.putConstraint(SpringLayout.SOUTH, this.lb_uploadStatus, 12, SpringLayout.NORTH, this.lb_uploadStatus);
        panel.add(this.lb_uploadStatus);

        springPanel.putConstraint(SpringLayout.NORTH, this.pb_progress, 2, SpringLayout.SOUTH, this.lb_uploadStatus);
        springPanel.putConstraint(SpringLayout.WEST, this.pb_progress, 0, SpringLayout.WEST, this.lb_workflows);
        springPanel.putConstraint(SpringLayout.EAST, this.pb_progress, -10, SpringLayout.EAST, panel);
        springPanel.putConstraint(SpringLayout.SOUTH, this.pb_progress, 20, SpringLayout.NORTH, this.pb_progress);
        panel.add(this.pb_progress);

        springPanel.putConstraint(SpringLayout.NORTH, this.b_upload, 5, SpringLayout.SOUTH, this.pb_progress);
        springPanel.putConstraint(SpringLayout.WEST, this.b_upload, ((window.getWidth() - 120) / 2), SpringLayout.WEST, panel);
        springPanel.putConstraint(SpringLayout.EAST, this.b_upload, -((window.getWidth() - 120) / 2), SpringLayout.EAST, panel);
        springPanel.putConstraint(SpringLayout.SOUTH, this.b_upload, 24, SpringLayout.NORTH, this.b_upload);
        panel.add(this.b_upload);

        springPanel.putConstraint(SpringLayout.EAST, this.b_test, -5, SpringLayout.WEST, this.b_upload);
        springPanel.putConstraint(SpringLayout.NORTH, this.b_test, 0, SpringLayout.NORTH, this.b_upload);
        //panel.add(this.b_test);

        window.add(panel, BorderLayout.CENTER);

        this.b_fileChooser.addActionListener(this);
        this.b_connect.addActionListener(this);
        this.b_upload.addActionListener(this);
        this.b_test.addActionListener(this);
        this.cb_workflows.addActionListener(this);

        this.tf_dozent.getDocument().addDocumentListener(this);
        this.tf_titel.getDocument().addDocumentListener(this);
        this.tf_beschreibung.getDocument().addDocumentListener(this);

        window.setVisible(true);
    }

    public void time() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    calendar = Calendar.getInstance();
                    String[] monat = {"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"};
                    DecimalFormat f = new DecimalFormat("00");
                    String tag = f.format(calendar.get(Calendar.DAY_OF_MONTH));
                    String jahr = String.valueOf(calendar.get(Calendar.YEAR));
                    String stunde = f.format(calendar.get(Calendar.HOUR_OF_DAY));
                    String minute = f.format(calendar.get(Calendar.MINUTE));

                    lb_datum.setText(tag + ". " + monat[calendar.get(Calendar.MONTH)] + " " + jahr + " " + stunde + ":" + minute);

                    try {
                        int sleep = (60 - calendar.get(Calendar.SECOND)) * 1000;
                        Thread.sleep(sleep);
                    } catch (InterruptedException ex) {
                        System.err.println(ex.getMessage());
                    }
                }
            }
        }).start();
    }

    public void testConnection() {
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    if (logedIn && !upload && !ftp.testConnection()) {
                        logedIn = false;
                        lb_connectIndicator.setIcon(new ImageIcon(DatatypeConverter.parseHexBinary(hex_redLight)));
                        b_connect.setText("Connect");
                        b_upload.setEnabled(false);
                    }

                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        System.err.println(ex.getMessage());
                    }
                }
            }
        }).start();
    }

    public boolean enableUpload() {
        boolean datei = this.lb_datei.getText().length() > 0;
        boolean dozent = this.tf_dozent.getText().length() > 0;
        boolean titel = this.tf_titel.getText().length() > 0;
        boolean beschreibung = this.tf_beschreibung.getText().length() > 0;
        boolean workflow = this.cb_workflows.getSelectedItem().toString().length() > 0;

        return this.ftp.connected() && datei && dozent && titel && beschreibung && workflow && !this.upload;
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        Object o = e.getSource();

        if (o == Window.this.b_connect) {

            new Thread(new Runnable() {

                public void run() {

                    if (Window.this.logedIn) {
                        if (Window.this.ftp.logOut()) {
                            Window.this.logedIn = false;
                            Window.this.lb_connectIndicator.setIcon(new ImageIcon(DatatypeConverter.parseHexBinary(Window.this.hex_redLight)));
                            Window.this.b_connect.setText("Connect");
                            Window.this.lb_loginStatus.setText("Disconnected");
                            Window.this.b_upload.setEnabled(enableUpload());
                        }
                    } else {
                        try {
                            Window.this.settings.setLocation((int) (Window.this.window.getLocation().getX() + ((Window.this.window.getSize().width - settings.getSize().width) / 2)), (int) (Window.this.window.getLocation().getY() + 72));
                            Window.this.settings.setVisible(true);
                            char[] pass = Window.this.settings.getPassword();
                            if (pass == null) {
                                return;
                            }

                            Window.this.server.key(pass);
                            Arrays.fill(pass, '0');

                            Window.this.lb_connectIndicator.setIcon(new ImageIcon(DatatypeConverter.parseHexBinary(Window.this.hex_yellowLight)));
                            Window.this.b_connect.setEnabled(false);
                            Window.this.lb_loginStatus.setText("Connecting ...");

                            if (Window.this.ftp.logIn(Window.this.server)) {
                                Window.this.logedIn = true;
                                Window.this.lb_connectIndicator.setIcon(new ImageIcon(DatatypeConverter.parseHexBinary(Window.this.hex_greenLight)));
                                Window.this.b_connect.setEnabled(true);
                                Window.this.b_connect.setText("Disconnect");
                                Window.this.b_upload.setEnabled(enableUpload());
                            } else {
                                Window.this.lb_connectIndicator.setIcon(new ImageIcon(DatatypeConverter.parseHexBinary(Window.this.hex_redLight)));
                                Window.this.b_connect.setEnabled(true);
                                Window.this.lb_loginStatus.setText("Connecting failed");
                            }

                        } catch (Exception ex) {
                            Window.this.lb_connectIndicator.setIcon(new ImageIcon(DatatypeConverter.parseHexBinary(Window.this.hex_redLight)));
                            Window.this.b_connect.setEnabled(true);
                            Window.this.lb_loginStatus.setText(ex.getMessage());
                            System.err.println(ex.getMessage());
                        }
                    }
                    Window.this.b_upload.setEnabled(enableUpload());

                }

            }).start();

        } else if (o == Window.this.b_fileChooser) {
            String pfad = null;
            System.out.println(System.getProperty("user.home"));
            if ("Mac OS X".equals(System.getProperty("os.name"))) {
                pfad = System.getProperty("user.home") + "/Movies/";
            } else if (System.getProperty("os.name").startsWith("Windows")) {
                pfad = "C:\\Users\\" + System.getProperty("user.name") + "\\Videos";
            }
            JFileChooser chooser = new JFileChooser(pfad);
            FileFilter filter = new FileNameExtensionFilter("Videodatei", "mp4", "mov", "m4v");
            chooser.setFileFilter(filter);
            chooser.setMultiSelectionEnabled(false);
            int open = chooser.showOpenDialog(null);
            if (open == JFileChooser.APPROVE_OPTION) {
                Window.this.movie = chooser.getSelectedFile();
                Window.this.lb_datei.setText(Window.this.movie.getName());
                Window.this.b_upload.setEnabled(Window.this.enableUpload());
                Window.this.lb_uploadStatus.setText(" ");
                Window.this.pb_progress.setValue(0);
            }
            chooser = null;
        } else if (o == Window.this.b_upload) {

            new Thread(new Runnable() {

                public void run() {

                    if (Window.this.ftp.connected()) {
                        Window.this.b_connect.setEnabled(false);
                        Window.this.b_upload.setEnabled(false);
                        Window.this.b_fileChooser.setEnabled(false);
                        Window.this.upload = true;
                        Window.this.ftp.upload(Window.this.movie, Window.this.tf_dozent.getText(), Window.this.tf_titel.getText(), Window.this.tf_beschreibung.getText(), Window.this.cb_workflows.getSelectedItem().toString());
                    } else {
                        Window.this.lb_uploadStatus.setText("Connection lost!");
                        Window.this.b_upload.setEnabled(Window.this.enableUpload());
                    }
                }

            }).start();

        } else if (o == Window.this.cb_workflows) {
            Window.this.b_upload.setEnabled(Window.this.enableUpload());
        } else if (o == Window.this.b_test) {
            String key = "";
            try {
                Window.this.server.key(key.toCharArray());
            } catch (Exception ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            String temp = "...";
            System.out.println(Window.this.server.encrypt(temp));
        }

    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        this.b_upload.setEnabled(this.enableUpload());
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        this.b_upload.setEnabled(this.enableUpload());
    }

    @Override
    public void changedUpdate(DocumentEvent e) {

    }

    public JButton getBUpload() {
        return this.b_upload;
    }

    public JButton getBConnect() {
        return this.b_connect;
    }

    public JButton getBFileChooser() {
        return this.b_fileChooser;
    }

    public JProgressBar getPBProgress() {
        return this.pb_progress;
    }

    public void setLBUploadStatus(String text) {
        this.lb_uploadStatus.setText(text);
    }

    public void setLBLoginStatus(String text) {
        this.lb_loginStatus.setText(text);
    }

    public void setUpload(boolean bo) {
        this.upload = bo;
    }

    public JLabel getLBIndicator() {
        return this.lb_connectIndicator;
    }

}
