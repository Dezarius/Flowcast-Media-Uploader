/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ftp;


import gui.Window;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.xml.bind.DatatypeConverter;
import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.commons.net.ftp.FTPSClient;

/**
 *
 * @author Kristof Dinkr√§ve
 */
public class Ftp{
    
    FTPClient client;
    Window window;
    Server server;
    Calendar calendar;
    
    private String hex_error
    
    public Ftp(Window window){
        this.client = new FTPClient();
        
        
        this.window = window;
    }
    
    public boolean logIn(Server server) throws Exception{
        //window.getLBIndicator().setIcon(new ImageIcon(DatatypeConverter.parseHexBinary(window.getHexYellowLight())));
        try {
            this.client = new FTPClient();
            this.client.setConnectTimeout(2000);
            this.client.setDefaultTimeout(2000);
            
            this.client.connect(server.decrypt("server", true), 21);
            if(!FTPReply.isPositiveCompletion(client.getReplyCode())){
                client.disconnect();
                window.setLBLoginStatus("FTP server refused connection.");
                server.deleatKey();
                return false;
            }
            System.out.println("FTP");
            
            boolean login = this.client.login(server.decrypt("user",true), server.decrypt("pass", true));
            if(login){
                this.client.enterLocalPassiveMode();
                server.deleatKey();
                return login;
            }
            else {
                window.setLBLoginStatus("Login failed");
                this.client.disconnect();
                server.deleatKey();
                return login;
            }
        } catch (IOException ex) {
            try {
                this.client = new FTPSClient("SSL", false);
                //this.client.addProtocolCommandListener(new PrintCommandListener(System.out, true));
                this.client.setConnectTimeout(2000);
                this.client.setDefaultTimeout(2000);
                
                this.client.connect(server.decrypt("server", false), 21);
                if(!FTPReply.isPositiveCompletion(client.getReplyCode())){
                    client.disconnect();
                    window.setLBLoginStatus("FTP server refused connection.");
                    server.deleatKey();
                    return false;
                }
                System.out.println("FTPS");
            
                boolean login = this.client.login(server.decrypt("user",false), server.decrypt("pass", false));
                if(login){
                    this.client.enterLocalPassiveMode();
                    server.deleatKey();
                    return login;
                }
                else {
                    window.setLBLoginStatus("Login failed");
                    this.client.disconnect();
                    server.deleatKey();
                    return login;
                } 
            }
            catch(IOException ex1) {
                server.deleatKey();
                window.setLBLoginStatus(ex1.getMessage());
                return false;
            } catch (Exception ex1) {
                throw new Exception("wrong password", ex1);
            }
        } catch (Exception ex) {
            throw new Exception("wrong password", ex);
        }
        
    }
    
    public boolean logOut(){
        try {
            this.client.logout();
            this.client.disconnect();
            return true;
        } catch (IOException ex) {
            System.out.println("Oops! Something wrong happened");
            window.setLBLoginStatus(ex.getMessage());
            return true;
        }
    }
    
    public boolean connected(){
        return this.client.isConnected();
    }
    
    public boolean testConnection() {
        try {
            return this.client.sendNoOp();
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
            window.setLBLoginStatus("Connection lost");
            
            return false;
        }
    }
    
    public void upload(File movie, String dozent, String titel, String beschreibung, String workflow){
        
        new Thread( new Runnable(){
            @Override 
            public void run(){
                
                calendar = Calendar.getInstance();
                
                String metadaten = dozent + "\n" + titel + "\n" + beschreibung + "\n" + workflow;
                String dateiname = dozent + "_" + calendar.get(Calendar.DATE) + "-" + (calendar.get(Calendar.MONTH) + 1) + "-" + 
                                    calendar.get(Calendar.YEAR) + "_" + calendar.get(Calendar.HOUR_OF_DAY) + "-" + 
                                    calendar.get(Calendar.MINUTE) + "-" + calendar.get(Calendar.SECOND);
                
                
                FileWriter fw;
                File meta = new File(movie.getParent(), dateiname + ".txt");
                
		try {
                    fw = new FileWriter(meta);
                    fw.write(metadaten);
                    fw.close();
		} catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not create Metadata!", "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(DatatypeConverter.parseHexBinary(hex_error)));
                    meta.delete();
                    window.setLBUploadStatus("Could not create Metadata!");
                    return;
                }

                try {
                    client.setFileType(FTP.BINARY_FILE_TYPE);
                    byte[] bytesIn = new byte[4096];
                    int read = 0;
                    long groe√üe = (movie.length() / 1024) + (meta.length() / 1024);
                    window.getPBProgress().setValue(0);
                    window.getPBProgress().setMinimum(0);
                    window.getPBProgress().setMaximum((int) groe√üe);
                    
                    window.setLBUploadStatus("Upload ...");
                    
                    String fileMeta = "/Metadaten/" + dateiname + meta.getName().substring(meta.getName().lastIndexOf('.'));
                    String fileMovie = "/Input/" + dateiname + movie.getName().substring(movie.getName().lastIndexOf('.'));
                    
                    InputStream inputStreamMeta = new FileInputStream(meta);
                    OutputStream outputStreamMeta = client.storeFileStream(fileMeta);
                    
                    while ((read = inputStreamMeta.read(bytesIn)) != -1) {
                        outputStreamMeta.write(bytesIn, 0, read);
                        window.getPBProgress().setValue(window.getPBProgress().getValue() + (read/1024));
                
                    }
 
                    inputStreamMeta.close();
                    outputStreamMeta.close();
                    
 
                    boolean completedMeta = client.completePendingCommand();
                    boolean completedMovie;

                    if(completedMeta) {
                        InputStream inputStreamMovie = new FileInputStream(movie);
                        OutputStream outputStreamMovie = client.storeFileStream(fileMovie);
                    
                        while ((read = inputStreamMovie.read(bytesIn)) != -1) {
                            outputStreamMovie.write(bytesIn, 0, read);
                            window.getPBProgress().setValue(window.getPBProgress().getValue() + (read/1024));
                        }
                    
                        inputStreamMovie.close();
                        outputStreamMovie.close();
                    
                        completedMovie = client.completePendingCommand();
                    } else {
                        window.setLBUploadStatus("Upload Metadaten failed!");
                        return;
                    }
                    
                    if (completedMovie && completedMeta) {
                        window.setLBUploadStatus("Upload successfully");
                    }
                    else {
                        window.setLBUploadStatus("Upload Movie failed!");
                    }
            
                } catch (IOException ex) {
                    window.setLBUploadStatus("Error: " + ex.getMessage());
                    try {
                        client.disconnect();
                    } catch (IOException ex1) {
                        window.setLBLoginStatus(ex1.getMessage());
                        
                    }
                    window.getBConnect().setText("Connect");
                    window.getLBIndicator().setIcon(new ImageIcon("red_light.png"));
                }
                finally{
                    meta.delete();
                    
                    window.getBConnect().setEnabled(true);
                    window.getBFileChooser().setEnabled(true);
                    window.getBUpload().setEnabled(false);
                    window.setUpload(false);
                }
            }
        } ).start();
    }
}
